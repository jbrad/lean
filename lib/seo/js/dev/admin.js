/**
 * Removes entry elements from the array.
 *
 * @params	$		A reference to the jQuery function
 * @params	words	A reference array of words to be cleaned of empty spaces
 * @return  array	The array of words without the whitespace.
 */
function cleanTitle($, words) {
	"use strict";

	var cleanWords, cleanWord;
	cleanWords = [];
	cleanWord = '';

	$(words).each(function() {

		if( 0 !== $.trim( this ).length ) {

			cleanWord = this.replace( /^[\u0000-\u002B\u0021-\u002F\u003A-\u003F\u005B-\u005F\u007B-\u007E]+/, '' );
			if( 0 < $.trim( cleanWord ).length ) {
				cleanWords.push( cleanWord );
			} // end if

		} // end if
	});

	return cleanWords;

} // end cleanTitle

/**
 * Generates a default description to populate in the meta description preview if none has been provided.
 *
 * @params	$		A reference to the jQuery function
 * @params	$this	A reference to the text area that contains the post meta description.
 */
function getMetaDescription($, $this) {
	"use strict";

	// Update the preview of the description. If the description is empty, then we'll provide a placeholder.
	var sDescription = $this.val();
	if( $.trim(sDescription).length === 0 ) {

		/* Translators: This will need to be localized. */
		sDescription = '<em>This description will be automatically generated by search engines unless you add a Meta Description below.</em>';

	} // end if

	return sDescription;

} // end getMetaDescription

/**
 * Updates the meta description character count, preview, and keywords that match the title.
 *
 * @params	$		The jQuery function
 * @params	$this	A reference to the meta description field
 */
function updateMetaDescription($, $this) {
	"use strict";

	var oMatch, aTitleWords, aMatches, sCurrentWord, oRegEx, i, l;

	// First, we update the character counter
	$('#character-count').text( 140 - parseInt($this.val().length, 10) );

	// Next, go ahead an populate the description with whatever has been sotred.
	$('#description').html(getMetaDescription($, $this));

	aTitleWords = $.trim($('#post-title').text()).split(' ');
	aTitleWords = cleanTitle( $, aTitleWords );
	aMatches = [];
	if(0 < aTitleWords.length && 0 < $.trim(aTitleWords[0]).length ) {

		// Loop through each of the title words...
		for( i = 0, l = aTitleWords.length; i < l; i++) {

			// Get the current word in the title and define a regex used to match it.
			sCurrentWord = aTitleWords[i];

			// Only try to match if a current word exists
			if( '' !== sCurrentWord ) {

				oRegEx = new RegExp( '\\b' + sCurrentWord + '\\b', 'gi' );

				// If a match has been found, store it in the array of matches
				oMatch = $('#standard_seo_post_meta_description').val().match( oRegEx );
				if( null !== oMatch ) {
					aMatches.push( oMatch );
				} // end if

			} // end if

		} // end for

	} else {

		$('#description').html( getMetaDescription( $, $this ) );

	} // end if/else

	// Loop through each of the matches that were found...
	$(aMatches).each(function() {

		// Only try to match if a current word exists
		if( '' !== this ) {

			// Finally, update the HTML of the description
			if ( 1 < this.length ) {

				$(this).each(function() {

					oRegEx = new RegExp( '\\b' + this + '\\b', 'g' );

					$('#description').html(
						$('#description').html().replace(oRegEx, '<strong>' + this + '</strong>')
					);

				});

			} else {

				oRegEx = new RegExp( '\\b' + this + '\\b', 'g' );

				$('#description').html(
					$('#description').html().replace(oRegEx, '<strong>' + this + '</strong>')
				);

			} // end if/else

		} // end if

	});

} // end updateMetaDescription

(function($) {
	"use strict";

	$(function() {

		// TODO refactor this.
		if( 0 < $('#post-title').length ) {

			// Grab the post title
			$('#post-title').text($('#title').val());
			$('#blog-title').text($('#site-title').text());

			// If the post title changes, update the preview
			$('#title').keyup(function() {
				$('#post-title').text($(this).val());
			});

			// Poll the permalink field and update the preview as it changes
			setInterval(function() {
				if($('#sample-permalink').text().length > 0 && $('#sample-permalink').text().indexOf('http://') === 0) {
					$('#permalink').text($('#sample-permalink').text());
				} // end if
			}, 1000);

			// Poll the date field and update the preview as it changes
			setInterval(function() {
				if($('#timestamp > b').text().indexOf('@') !== -1) {
					$('#date').text($('#timestamp > b').text().split('@')[0]);
				} else {
					$('#date').text($('#todays-date').text());
				} // end if
			}, 1000);

			// Update the description preview to match what the user has entered
			updateMetaDescription($, $('#standard_seo_post_meta_description'));
			$('#standard_seo_post_meta_description').keyup(function() {
				updateMetaDescription($, $(this));
			});

		} // end if

	});
}(jQuery));